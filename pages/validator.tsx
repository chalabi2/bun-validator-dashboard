import Head from "next/head";
import { useState, useEffect, SetStateAction } from "react";
import { useChainName } from "../contexts/chainName";
import { cosmos } from "interchain-query";

import { useTx } from "../hooks/useTx";
import { assets, chains } from "chain-registry";
import { shiftDigits } from "../utils/maths";
import { StdFee } from "@cosmjs/stargate";
import { useChain } from "@cosmos-kit/react";

export default function Validator() {
  const tabs = [
    { name: "Commission", href: "#commission" },
    { name: "Details", href: "#details" },
    { name: "Slashing", href: "#slashing" },
  ];

  const [isSiging, setIsSigning] = useState<boolean>(false);

  // State to track the current active tab based on the hash in the URL
  const [currentTab, setCurrentTab] = useState(tabs[0].href);

  useEffect(() => {
    if (typeof window !== "undefined") {
      setCurrentTab(window.location.hash || tabs[0].href);
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  function classNames(...classes: string[]) {
    return classes.filter(Boolean).join(" ");
  }

  const handleTabClick = (href: string) => {
    if (typeof window === "undefined") {
      return;
    }
    setCurrentTab(href);
    window.location.hash = href;
  };

  const commissionStats = [
    { name: "Commission", stat: "71,897 $AKT" },
    { name: "Validator", stat: "Chandra Station" },
    { name: "Monthly Avg", stat: "2,000 $AKT" },
  ];

  const slashingStats = [
    { name: "Missed Blocks", stat: "1,000" },
    { name: "Validator", stat: "Chandra Station" },
    { name: "Jail Status", stat: "True" },
  ];

  const { chainName } = useChainName();
  const { address } = useChain(chainName);

  const { tx } = useTx(chainName);

  const { withdrawValidatorCommission, withdrawDelegatorReward } =
    cosmos.distribution.v1beta1.MessageComposer.withTypeUrl;

  const { unjail } = cosmos.slashing.v1beta1.MessageComposer.withTypeUrl;

  const msgClaimCommission = withdrawValidatorCommission({
    validatorAddress: "",
  });

  const msgClaimRewards = withdrawDelegatorReward({
    validatorAddress: "cosmosvaloper196ax4vc0lwpxndu9dyhvca7jhxp70rmcvrj90c",
    delegatorAddress: address ?? "",
  });

  const msgUnjail = unjail({
    validatorAddr: "",
  });

  const mainTokens = assets.find(({ chain_name }) => chain_name === chainName);
  const fees = chains.find(({ chain_name }) => chain_name === chainName)?.fees
    ?.fee_tokens;
  const mainDenom = mainTokens?.assets[0].base ?? "";
  let feeAmount;
  if (chainName === "sommelier") {
    // Hardcoded value for sommelier-3
    feeAmount = "10000";
  } else {
    // Default case
    const fixedMinGasPrice =
      fees?.find(({ denom }) => denom === mainDenom)?.average_gas_price ?? "";
    feeAmount = shiftDigits(fixedMinGasPrice, 6).toString();
  }

  const fee: StdFee = {
    amount: [
      {
        denom: mainDenom,
        amount: feeAmount,
      },
    ],
    gas: "500000",
  };

  const handleCommissionClaim = async (event: React.MouseEvent) => {
    event.preventDefault();
    setIsSigning(true);
    try {
      const result = await tx([msgClaimRewards], {
        fee,
        onSuccess: () => {},
      });
    } catch (error) {
      setIsSigning(false);
      console.error("Transaction failed", error);
    } finally {
      setIsSigning(false);
    }
  };

  return (
    <div className="relative z-0 max-w-screen   px-10 mx-6 lg:mx-auto">
      <Head>
        <title>Block Explorer</title>
        <meta name="description" content="Generated by create cosmos app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="mx-auto w-5/6 h-[800px] shadow-lg rounded-md">
        <div>
          <div className="sm:hidden">
            <label htmlFor="tabs" className="sr-only">
              Select a tab
            </label>
            <select
              id="tabs"
              name="tabs"
              className="block w-full rounded-t-md border-gray-300 focus:border-accent-light dark:focus:border-accent-dark focus:ring-accent-light dark:focus:ring-accent-dark"
              value={currentTab}
              onChange={(e) => handleTabClick(e.target.value)}
            >
              {tabs.map((tab) => (
                <option key={tab.name} value={tab.href}>
                  {tab.name}
                </option>
              ))}
            </select>
          </div>
          <div className="hidden sm:block">
            <nav
              className="isolate flex divide-x divide-accent-light dark:divide-accent-dark rounded-t-md shadow"
              aria-label="Tabs"
            >
              {tabs.map((tab, tabIdx) => (
                <button
                  key={tab.name}
                  onClick={() => handleTabClick(tab.href)}
                  className={classNames(
                    currentTab === tab.href
                      ? "text-gray-900 dark:text-gray-50"
                      : "text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300",
                    tabIdx === 0 ? "rounded-tl-md" : "",
                    tabIdx === tabs.length - 1 ? "rounded-tr-md" : "",
                    "group relative min-w-0 flex-1 overflow-hidden bg-gray-100 dark:bg-gray-700 py-4 px-4 text-center text-sm font-medium hover:bg-gray-200 dark:hover:bg-gray-600 focus:z-10"
                  )}
                  aria-current={currentTab === tab.href ? "page" : undefined}
                >
                  <span>{tab.name}</span>
                  <span
                    aria-hidden="true"
                    className={classNames(
                      currentTab === tab.href
                        ? "bg-accent-light dark:bg-accent-dark"
                        : "bg-transparent",
                      "absolute inset-x-0 bottom-0 h-0.5"
                    )}
                  />
                </button>
              ))}
            </nav>
            <div className="p-4">
              {currentTab === "#commission" && (
                <div>
                  <dl className="mt-12 grid grid-cols-1 gap-5 sm:grid-cols-3">
                    {commissionStats.map((item) => (
                      <div
                        key={item.name}
                        className="overflow-hidden rounded-lg bg-white px-4 py-5 shadow sm:p-6"
                      >
                        <dt className="truncate text-sm font-medium text-gray-500">
                          {item.name}
                        </dt>
                        <dd className="mt-1 text-3xl font-semibold tracking-tight text-gray-900">
                          {item.stat}
                        </dd>
                      </div>
                    ))}
                  </dl>
                  <div className="flex justify-center mt-16">
                    <button
                      type="button"
                      onClick={handleCommissionClaim}
                      className="relative rounded-md bg-white px-3.5 py-2.5 max-w-[200px] min-w-[200px] text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-accent-light focus:border-accent-light hover:bg-gray-50 flex justify-center items-center"
                    >
                      <span className={`${isSiging ? "invisible" : "visible"}`}>
                        Claim Commission
                      </span>
                      {isSiging && (
                        <div className="absolute inset-0 flex justify-center items-center">
                          <div className="animate-spin rounded-full h-6 w-6">
                            <div className="w-full h-full rounded-full border-2 border-t-accent-light border-r-accent-light  border-l-accent-light"></div>
                          </div>

                          <span className="pl-2">Processing...</span>
                        </div>
                      )}
                    </button>
                  </div>
                </div>
              )}
              {currentTab === "#slashing" && (
                <div>
                  <dl className="mt-12 grid grid-cols-1 gap-5 sm:grid-cols-3">
                    {slashingStats.map((item) => (
                      <div
                        key={item.name}
                        className="overflow-hidden rounded-lg bg-white px-4 py-5 shadow sm:p-6"
                      >
                        <dt className="truncate text-sm font-medium text-gray-500">
                          {item.name}
                        </dt>
                        <dd className="mt-1 text-3xl font-semibold tracking-tight text-gray-900">
                          {item.stat}
                        </dd>
                      </div>
                    ))}
                  </dl>
                  <div className="flex justify-center mt-16">
                    <button
                      type="button"
                      className="rounded-md bg-white px-3.5 py-2.5 text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-accent-light hover:bg-gray-50"
                    >
                      Unjail
                    </button>
                  </div>
                </div>
              )}
              {currentTab === "#details" && (
                <>
                  <div className="isolate mt-12 mx-auto -space-y-px w-1/2 rounded-md shadow-sm">
                    <div className="relative rounded-md rounded-b-none px-3 pb-1.5 pt-2.5 ring-1 ring-inset ring-gray-300 focus-within:z-10 focus-within:ring-2 focus-within:ring-indigo-600">
                      <label className="block text-md font-medium text-gray-900">
                        Moniker
                      </label>
                      <input
                        type="text"
                        name="name"
                        id="name"
                        className="block w-full border-0 p-0 text-gray-900 placeholder:text-gray-400 focus:ring-0 sm:text-sm sm:leading-6"
                        placeholder="Chandra Station"
                      />
                    </div>
                    <div className="relative rounded-md rounded-b-none rounded-t-none px-3 pb-1.5 pt-2.5 ring-1 ring-inset ring-gray-300 focus-within:z-10 focus-within:ring-2 focus-within:ring-indigo-600">
                      <label className="block text-md font-medium text-gray-900">
                        Description
                      </label>
                      <input
                        type="text"
                        name="name"
                        id="name"
                        className="block w-full border-0 p-0 text-gray-900 placeholder:text-gray-400 focus:ring-0 sm:text-sm sm:leading-6"
                        placeholder="Validator of The Lunar God"
                      />
                    </div>
                    <div className="relative rounded-md rounded-t-none px-3 pb-1.5 pt-2.5 ring-1 ring-inset ring-gray-300 focus-within:z-10 focus-within:ring-2 focus-within:ring-indigo-600">
                      <label className="block text-md font-medium text-gray-900">
                        Commission Rate
                      </label>
                      <input
                        type="text"
                        name="job-title"
                        id="job-title"
                        className="block w-full border-0 p-0 text-gray-900 placeholder:text-gray-400 text-md focus:ring-0 sm:text-sm sm:leading-6"
                        placeholder="5%"
                      />
                    </div>
                  </div>
                  <div className="flex justify-center mt-8">
                    <button
                      type="button"
                      className="rounded-md bg-white px-3.5 py-2.5 text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-accent-light hover:bg-gray-50"
                    >
                      Update Details
                    </button>
                  </div>
                </>
              )}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
