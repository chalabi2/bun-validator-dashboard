import Head from "next/head";
import { useState, useEffect } from "react";
import { useChainName } from "../contexts/chainName";

import { assets, chains } from "chain-registry";
import { shiftDigits } from "../utils/maths";
import { StdFee } from "@cosmjs/stargate";
import { useChain } from "@cosmos-kit/react";
import { EditDetails } from "../components/validator/edit-details";
import {
  useSlashingQuery,
  useValidatorCommissionQuery,
  useValidatorsQuery,
} from "../query/useQueries";
import { fromBech32, toBech32 } from "@cosmjs/encoding";
import { convertChainName } from "../utils/staking";
import CommissionDetails from "../components/validator/commission-info";
import JailingDetails from "../components/validator/jailing-details";

interface ValidatorDetails {
  commissionRate: string;
  moniker: string;
  securityContact: string;
  details: string;
  identity: string;
  website: string;
}

export default function Validator() {
  const { chainName } = useChainName();

  const { address } = useChain(chainName);

  function getValoperAddress(
    address: string | undefined,
    chainName: string | undefined
  ): string | undefined {
    if (!address) {
      return undefined;
    }
    const { data } = fromBech32(address);

    const chainInfo = chains.find(({ chain_name }) => chain_name === chainName);

    if (!chainInfo) {
      console.warn("Chain not found");
      return undefined;
    }

    const bech32Prefix = chainInfo.bech32_prefix;
    const valoperPrefix = bech32Prefix + "valoper";
    return toBech32(valoperPrefix, data);
  }

  const [valoperAddress, setValoperAddress] = useState("");

  useEffect(() => {
    const updateValoperAddress = () => {
      const newAddress = getValoperAddress(address, chainName);
      setValoperAddress(newAddress || "");
    };

    updateValoperAddress();
  }, [chainName, address]);

  const { validatorsData, isError, isLoading } = useValidatorsQuery(chainName);
  const { commissionData, isCommissionError, isCommissionLoading } =
    useValidatorCommissionQuery(chainName, valoperAddress);
  const { slashingData, isSlashingError, isSlashingLoading } = useSlashingQuery(
    chainName,
    validatorsData?.[0]?.valconsAddress ?? ""
  );
  console.log(slashingData);

  const commissionAvailable = commissionData?.commission?.commission;

  const [validatorDetails, setValidatorDetails] = useState<ValidatorDetails>({
    commissionRate: "",
    moniker: "",
    securityContact: "",
    details: "",
    identity: "",
    website: "",
  });

  useEffect(() => {
    if (Array.isArray(validatorsData) && valoperAddress) {
      const foundValidator = validatorsData.find(
        (validator) => validator.address === valoperAddress
      );
      if (foundValidator) {
        setValidatorDetails({
          commissionRate: foundValidator.commission,
          moniker: foundValidator.name,
          securityContact: foundValidator.securityContact,
          details: foundValidator.description,
          identity: foundValidator.identity,
          website: foundValidator.website,
        });
      }
    }
  }, [validatorsData, valoperAddress, chainName]);

  const mainTokens = assets.find(({ chain_name }) => chain_name === chainName);
  const fees = chains.find(({ chain_name }) => chain_name === chainName)?.fees
    ?.fee_tokens;
  const mainDenom = mainTokens?.assets[0].base ?? "";
  let feeAmount;
  if (chainName === "sommelier") {
    feeAmount = "10000";
  } else {
    const fixedMinGasPrice =
      fees?.find(({ denom }) => denom === mainDenom)?.average_gas_price ?? "";
    feeAmount = shiftDigits(fixedMinGasPrice, 6).toString();
  }

  const fee: StdFee = {
    amount: [
      {
        denom: mainDenom,
        amount: feeAmount,
      },
    ],
    gas: "500000",
  };

  return (
    <div className="relative z-0 max-w-screen px-10 mx-6 lg:mx-auto mt-[-50px]">
      <Head>
        <title>Block Explorer</title>
        <meta name="description" content="Generated by create cosmos app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="divide-y divide-gray-200 overflow-hidden max-w-6xl mx-auto my-auto rounded-lg bg-gray-50 shadow">
        <div className="px-4 py-3 sm:px-6">
          <div className="mx-auto flex flex-row items-center gap-x-2">
            <img
              className="flex-shrink-0 w-10 h-10 mr-2 rounded-full"
              src={`https://data.quicksilver.zone/valoper/${convertChainName(
                chainName
              )}/${valoperAddress}`}
            />
            <div className=" text-md font-semibold tracking-tight text-gray-900 sm:text-2xl">
              {validatorDetails.moniker}
            </div>
          </div>
        </div>
        <div className="grid grid-cols-3 gap-4 px-4 py-4 sm:p-6 bg-gray-200">
          {" "}
          {/* Three-column layout */}
          <div className="col-span-1">
            {/* Column 1 content here */}
            <CommissionDetails
              address={address ?? ""}
              valoperAddress={valoperAddress}
              fee={fee}
              chainName={chainName}
              commissionAvailable={commissionAvailable}
              isCommissionError={isCommissionError}
              isCommissionLoading={isCommissionLoading}
            />
          </div>
          <div className="col-span-1">
            {/* Column 2 content here */}
            <JailingDetails
              address={address ?? ""}
              valoperAddress={valoperAddress}
              chainName={chainName}
              fee={fee}
              isSlashingError={isSlashingError}
              isSlashingLoading={isSlashingLoading}
            />
          </div>
          <div className="col-span-1">
            {/* Column 3 content here */}
            <EditDetails
              validatorDetails={validatorDetails}
              address={address ?? ""}
              fee={fee}
              chainName={chainName}
              valoperAddress={valoperAddress}
              isLoading={isLoading}
              isError={isError}
            />
          </div>
        </div>
      </div>
    </div>
  );
}
